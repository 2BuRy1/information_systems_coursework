#import "./functions.typ": lines
#import "./functions.typ": uc_table

#set page(margin: 2.5cm)
#set text(lang: "ru", font: "Times New Roman", size: 14pt)
#set page(numbering: none)

#align(center,  [
  #block[
    Федеральное государственное автономное образовательное учреждение высшего образования
    «*Национальный исследовательский университет ИТМО*»

    Факультет Программной Инженерии и Компьютерной Техники
  ]

  #v(48mm)

  #block[
    Создание информационной системы для проведения совместных сессий по написанию кода “*CodeTogether*”

    по дисциплине «Информационные системы»
  ]

  #v(0.6fr)

  #grid(
    columns: (2fr, 2fr),
    column-gutter: 2cm,

      [],
      [
        *Преподаватель:* \
        Тюрин Иван Николаевич \
        #v(2mm)
        *Выполнил:* \
        Федоров Евгений Константинович \
        Бондаренко Артем Андреевич \
        #v(2mm)
        *Группа:* P3310
      ]

  )

  #v(10mm)

  Санкт-Петербург 2025

])
#pagebreak()
#set page(numbering: "1")

#outline(
  indent: 2em,
)

#set heading(numbering: "1.")


= Этап 1

== Согласовать с преподавателем предметную область, для которой будет разрабатываться информационная система.
\
Согласована во время практического занятия.

== Составить подробное текстовое описание предметной области.
\
CodeTogether - это онлайн платформа для совместного написания и
редактирования кода в режиме реального времени.
Она позволяет пользователям видеть вносимые изменения,
что представляется особенно удобным для обучения и/или проведения интервью.
Основные элементы приложения включают в себя редактор кода с
подсветкой синтаксиса, возможность приглашать неограниченное
количество участников и взаимодействие между пользователями
в лице просмотра положения курсора каждого участника. Одним из аспектов является
постановка и выполнение совместных задач, просмотр статистики каждого пользователя в рамках рабочей сессии.
\

#pagebreak()
== Сформулировать, зачем нужна информационная система для представленной предметной области, какие задачи она позволит решить.
\
Информационная система для предметной области
CodeTogether нужна для того, чтобы организовать и упростить процесс
совместного написания кода в режиме реального времени,
обеспечив удобное взаимодействие участников независимо от их местоположения.

система позволяет решать следующие задачи:
-	совместная разработка кода
  -	Пользователи могут подключаться к «доске» и
    совместно писать код с подсветкой синтаксиса выбранного языка.

-	поддержка обучения и наставничества
  - Система позволяет проводить совместные занятия и семинары с
    демонстрацией синтаксических особенностей выбранного языка.

- подготовка и проведение технических интервью
  - Cистема позволяет проводить технические интервью для проверки знания синтаксиса языка,
    а также возможности человека писать без помощи ide.

-	улучшение командной работы
  - Система позволяет улучшить командную работу при
    помощи совместной разработки необходимых функций,
    написания их шаблонов в быстром и удобном формате.

- постановка и решение задач
  - Система позволяет создать панель задач
    для отслеживания прогресса проведения семинара, выполнения задачи.


#pagebreak()

== Составить функциональные/нефункциональные требования к разрабатываемой информационной системе.


#set heading(numbering: none)
=== Функциональные требования


==== Для авторизованного пользователя
#let f_reqs = (
"Система должна предоставлять пользователям возможность зарегистрировать аккаунт посредством формы",
"Система должна предоставлять пользователям возможность зарегистрировать аккаунт посредством GitHub",
"Система должна предоставлять пользователям возможность создать новую доску",
"Система должна предоставлять пользователям возможность одновременно редактировать текстовый файл ",
"Система должна предоставлять возможность выбрать используемой доской язык для подсветки синтаксиса",
"Система должна предоставлять возможность создать задачу для доски",
"Система должна предоставлять возможность просмотреть статистику каждого пользователя на доске",
"Система должна предоставлять возможность выдать роль на доске для пользователя",
"Система должна авторматически подтягивать фото с GitHub. При ошибке загружать базовое фото",
"Система должна предоставлять возможность пригласить участника на доску",


)




#lines("F", f_reqs)


#pagebreak()

==== Для авторизованного пользователя с доской


#let f_req_new = (
  "Система должна предоставлять возможность редактировать название доски",
  "Система должна предоставлять возможность удалить доску",
  "Система должна предоставлять возможность удалить участника с доски",
  "Система должна предоставлять возможность изменить роль участника на доске",
  "Система должна предоставлять возможность добавить задачи для доски",
  "Система должна предоставлять возможность удалять задачи для доски",
  "Система должна предоставить возможность сохранить свою доску и добавить ее в общий список."

)


#lines("F", f_req_new, start: f_reqs.len())



==== Для анонимных пользователей

#let observer_req =(
  "Система должна предоставить возможность инвалидировать ссылку через какое-то время.",
  "Система должна предоставить возможность просматривать доску, если у них есть ссылка на неё.",
  "Система должна ограничивать доступ на редактирование досок анонимным пользователям.",
  "Система должна предоставить возможность видеть чужие курсоры и выделяемый другими пользователями на доске текст."
)


#lines("F", observer_req, start: f_req_new.len())


=== Нефункциональные требования

==== Удобство использования
#let nfr_usability = (
  "Система должна корректно отображаться в браузерах: Chrome 21+, Safari 16+, Firefox 122+, Яндекс.Браузер 23+",
  "Система должна обеспечивать навигацию и поиск нужного элемента не более чем за 30 секунд",
  "Система должна иметь светлую цветовую схему (молочные тона) без резких контрастов",
)
#lines("U", nfr_usability)

==== Производительность
#let nfr_perf = (
  "Система должна поддерживать одновременную работу не менее 15 активных пользователей на одной доске",
  "Система должна предоставить сохранение автоснапшота документа — не более 1 секунды на операцию",
  "Система должна гарантировать обработку операций редактирования — 95 ≤ 200 мс"
)
#lines("P", nfr_perf)

==== Поддерживаемость
#let nfr_maint = (
  "Система должна логировать ошибки и предупреждения с уровнями (ERROR/WARN/INFO) ",
  "Система должна поддерживать конфигурацию через переменные окружения (DB url, креды, OAuth client-id/secret и т.д.)",
  "Система должна поддерживать ротацию секретов (обновление client secret и ключей подписи токенов) без простоя",
)
#lines("M", nfr_maint)

==== Надёжность
#let nfr_reliab = (
  "Система должна выполнять автосохранение изменений на доске каждые 5 секунд либо по инициативе пользователя",
  "Система должна предоставить восстановление доступа к сессии без потери данных при сетевой ошибке",
  "Система должна обеспечивать идемпотентность при повторной доставке событий редактирования",
)
#lines("R", nfr_reliab)


#set heading(numbering: "1.")
#pagebreak()
== Построить модели основных прецедентов, составить их описание.

#uc_table(
  name: "Регистрация через форму",
  id: "UC1 (F0)",
  brief: "Пользователь создает новую учетную запись на платформе, используя электронную почту и пароль",
  actor: "Неавторизованный пользователь (Гость)",
  pre: "Пользователь находится на главной странице или странице входа.",
  main: [
    #enum(
      enum.item(1)[Пользователь нажимает кнопку "Зарегистрироваться".],
      enum.item(2)[Система отображает форму регистрации (email, пароль).],
      enum.item(3)[Пользователь вводит валидный email и пароль],
      enum.item(4)[Пользователь подтверждает пароль и нажимает "Создать аккаунт".],
      enum.item(5)[Система хеширует пароль, создает запись в БД и автоматически авторизует пользователя.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Пользователь вводит email, который уже существует в системе.],
      enum.item(2)[Система отображает сообщение об ошибке: "Аккаунт с таким email уже существует".],
    )
  ],
  altB: [
    #enum(
      enum.item(1)[Пользователь вводит пароль, не соответствующий политике безопасности.],
      enum.item(2)[Система отображает сообщение об ошибке с требованиями к паролю.],
    )
  ],
  post: "В системе создана новая учетная запись. Пользователь аутентифицирован и перенаправлен в личный кабинет.",
)

#uc_table(
  name: "Регистрация через GitHub (OAuth)",
  id: "UC2 (F1)",
  brief: "Пользователь создает учетную запись или привязывает существующую, используя аккаунт GitHub.",
  actor: "Неавторизованный пользователь (Гость)",
  pre: "Пользователь находится на главной странице или странице входа.",
  main: [
    #enum(
      enum.item(1)[Пользователь нажимает кнопку "Войти через GitHub".],
      enum.item(2)[Система перенаправляет пользователя на страницу авторизации GitHub.],
      enum.item(3)[Пользователь вводит свои учетные данные GitHub и предоставляет запрашиваемые права.],
      enum.item(4)[GitHub перенаправляет пользователя обратно в систему с кодом авторизации.],
      enum.item(5)[Система обменивает код на access token и получает данные профиля пользователя из GitHub.],
      enum.item(6)[Если аккаунт с таким email не существует, система создает новую запись в БД.],
      enum.item(7)[Система авторизует пользователя и перенаправляет его в личный кабинет.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Пользователь отменяет авторизацию на стороне GitHub.],
      enum.item(2)[Пользователь перенаправляется обратно на главную страницу системы.]
    )
  ],
  post: "Учетная запись пользователя создана или найдена и привязана к GitHub. Пользователь аутентифицирован.",
)

#uc_table(
  name: "Смена пароля",
  id: "UC3 (SEC0)",
  brief: "Аутентифицированный пользователь изменяет свой текущий пароль.",
  actor: "Зарегистрированный Пользователь",
  pre: "Пользователь аутентифицирован и находится в разделе 'Настройки профиля'.",
  main: [
    #enum(
      enum.item(1)[Пользователь выбирает опцию "Сменить пароль".],
      enum.item(2)[Система отображает форму с полями: "Текущий пароль", "Новый пароль", "Подтвердить новый пароль".],
      enum.item(3)[Пользователь вводит текущий пароль, новый пароль и подтверждение.],
      enum.item(4)[Пользователь нажимает кнопку "Сохранить".],
      enum.item(5)[Система проверяет, что текущий пароль верен, а новый пароль соответствует политике безопасности.],
      enum.item(6)[Система хеширует новый пароль и сохраняет его в БД.],
      enum.item(7)[Система отображает сообщение об успешной смене пароля.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Текущий пароль введен неверно.],
      enum.item(2)[Система отображает сообщение: "Неверный текущий пароль".]
    )
  ],
  altB: [
    #enum(
      enum.item(1)[Новый пароль не соответствует политике безопасности.],
      enum.item(2)[Система отображает сообщение с требованиями к паролю.]
    )
  ],
  post: "Пароль учетной записи пользователя изменен.",
)

#uc_table(
  name: "Выбор аватара",
  id: "UC4 (F8)",
  brief: "Пользователь выбирает изображение для своего профиля из каталога системы.",
  actor: "Зарегистрированный Пользователь",
  pre: "Пользователь аутентифицирован и находится в разделе 'Настройки профиля'.",
  main: [
    #enum(
      enum.item(1)[Пользователь нажимает на кнопку "Сменить аватар".],
      enum.item(2)[Система отображает модальное окно с каталогом доступных аватаров.],
      enum.item(3)[Пользователь выбирает понравившийся аватар и нажимает "Сохранить".],
      enum.item(4)[Система обновляет аватар пользователя в БД.],
      enum.item(5)[Система закрывает модальное окно и отображает новый аватар в профиле.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Пользователь нажимает "Отмена".],
      enum.item(2)[Система закрывает модальное окно без сохранения изменений.]
    )
  ],
  post: "Аватар пользователя в системе изменен.",
)

#uc_table(
  name: "Создание новой доски",
  id: "UC5 (F2)",
  brief: "Пользователь создает новую виртуальную доску для совместного редактирования кода.",
  actor: "Зарегистрированный Пользователь",
  pre: "Пользователь аутентифицирован и находится в своем личном кабинете (список досок).",
  main: [
    #enum(
      enum.item(1)[Пользователь нажимает кнопку "Создать доску".],
      enum.item(2)[Система отображает форму с полем "Название доски" (опционально).],
      enum.item(3)[Пользователь вводит название (или оставляет поле пустым) и нажимает "Создать".],
      enum.item(4)[Система создает новую доску в БД, назначая текущего пользователя ее владельцем.],
      enum.item(5)[Система перенаправляет пользователя на страницу созданной доски.]
    )
  ],
  post: "Новая доска создана. Пользователь является ее владельцем и перенаправлен на нее.",
)

#uc_table(
  name: "Совместное редактирование кода",
  id: "UC6 (F3, F4, P3, P4, R0, R1, R3)",
  brief: "Несколько пользователей одновременно редактируют код на одной доске. Изменения синхронизируются в реальном времени.",
  actor: "Зарегистрированный Пользователь или Анонимный Пользователь (только просмотр, F7)",
  pre: "Пользователь имеет доступ к доске (является участником или имеет ссылку) и открыл ее.",
  main: [
    #enum(
      enum.item(1)[Система загружает текущее содержимое документа и подключает пользователя к серверу по WebSocket для получения обновлений.],
      enum.item(2)[Пользователь вносит изменения в текст (печатает, удаляет).],
      enum.item(3)[Система немедленно отображает ввод пользователя локально.],
      enum.item(4)[Система отправляет операцию редактирования на сервер (задержка 95 ≤ 200 мс).],
      enum.item(5)[Сервер рассылает операцию всем остальным подключенным пользователям доски.],
      enum.item(6)[Система отображает изменения от других пользователей, включая положение их курсоров.],
      enum.item(7)[Система автоматически сохраняет состояние документа каждые 5 секунд (R0) или по команде пользователя.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Соединение пользователя с сервером прерывается.],
      enum.item(2)[Система уведомляет пользователя о потере соединения и пытается переподключиться.],
      enum.item(3)[После восстановления соединения система синхронизирует состояние (R1).]
    )
  ],
  altB: [
    #enum(
      enum.item(1)[Анонимный пользователь открывает доску по ссылке.],
      enum.item(2)[Система отображает содержимое доски в режиме "только чтение" (F7).]
    )
  ],
  post: "Все изменения пользователей синхронизированы. Состояние документа сохранено.",
)

#uc_table(
  name: "Приглашение участника на доску",
  id: "UC7 (F9)",
  brief: "Владелец или участник с правами приглашает нового пользователя на доску.",
  actor: "Зарегистрированный Пользователь (с соответствующими правами на доске)",
  pre: "Пользователь открыл доску, на которую хочет пригласить участника.",
  main: [
    #enum(
      enum.item(1)[Пользователь нажимает кнопку "Пригласить".],
      enum.item(2)[Система отображает поле для ввода email или генерации invite-ссылки.],
      enum.item(3)[Пользователь вводит email приглашаемого и нажимает "Отправить приглашение".],
      enum.item(4)[Система отправляет email с ссылкой для доступа к доске.],
      enum.item(5)[Приглашенный пользователь получает email и переходит по ссылке.],
      enum.item(6)[Система добавляет пользователя к участникам доски.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Пользователь выбирает опцию "Скопировать ссылку".],
      enum.item(2)[Система генерирует уникальную ссылку и копирует ее в буфер обмена.],
      enum.item(3)[Пользователь вручную отправляет ссылку (например, через мессенджер).]
    )
  ],
  post: "Новый участник добавлен к доске и имеет доступ к ней.",
)

#uc_table(
  name: "Управление задачами доски (Создание)",
  id: "UC8 (F5, F14)",
  brief: "Владелец доски создает новую задачу для отслеживания прогресса.",
  actor: "Владелец Доски",
  pre: "Пользователь является владельцем доски и открыл ее.",
  main: [
    #enum(
      enum.item(1)[Пользователь открывает панель "Задачи" на доске.],
      enum.item(2)[Пользователь нажимает кнопку "Добавить задачу".],
      enum.item(3)[Система отображает форму с полями: "Название".],
      enum.item(4)[Пользователь заполняет поля и нажимает "Создать".],
      enum.item(5)[Система добавляет задачу в список задач доски.]
    )
  ],
  post: "Новая задача создана и отображается в панели задач доски.",
)

#uc_table(
  name: "Управление задачами доски (Удаление)",
  id: "UC9 (F15)",
  brief: "Владелец доски удаляет задачу.",
  actor: "Владелец Доски",
  pre: "Владелец открыл доску и панель 'Задачи'. В списке есть хотя бы одна задача.",
  main: [
    #enum(
      enum.item(1)[Пользователь наводит курсор на задачу в списке и нажимает значок "Удалить" (корзина).],
      enum.item(2)[Система запрашивает подтверждение: "Вы уверены?".],
      enum.item(3)[Пользователь подтверждает удаление.],
      enum.item(4)[Система удаляет задачу из БД.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Пользователь отменяет удаление.],
      enum.item(2)[Система закрывает диалог подтверждения, задача не удаляется.]
    )
  ],
  post: "Задача удалена из списка задач доски.",
)

#uc_table(
  name: "Просмотр статистики пользователей",
  id: "UC10 (F6)",
  brief: "Владелец или участник просматривает статистику активности всех пользователей на доске.",
  actor: "Зарегистрированный Пользователь (с правами на просмотр статистики)",
  pre: "Пользователь открыл доску.",
  main: [
    #enum(
      enum.item(1)[Пользователь открывает панель "Статистика" или "Участники".],
      enum.item(2)[Система отображает список участников и метрики их активности (например, количество напечатанных символов, время в сети, решенные задачи).],
      enum.item(3)[Пользователь просматривает статистику.]
    )
  ],
  post: "Пользователь получил информацию об активности на доске.",
)

#uc_table(
  name: "Назначение ролей участникам",
  id: "UC11 (F7, F13)",
  brief: "Владелец доски изменяет роль другого участника (например, 'Редактор', 'Только чтение').",
  actor: "Владелец Доски",
  pre: "Владелец открыл доску. На доске есть другие участники.",
  main: [
    #enum(
      enum.item(1)[Владелец открывает панель "Участники".],
      enum.item(2)[Владелец нажимает на меню (три точки) рядом с участником, чью роль нужно изменить.],
      enum.item(3)[Владелец выбирает новую роль из выпадающего списка (например, "Редактор", "Наблюдатель").],
      enum.item(4)[Система обновляет права доступа участника в БД.],
      enum.item(5)[Система немедленно применяет новые права для этого участника (например, запрещает редактирование).]
    )
  ],
  post: "Роль участника изменена. Его права на текущей доске обновлены.",
)

#uc_table(
  name: "Удаление участника с доски",
  id: "UC12 (F12)",
  brief: "Владелец доски удаляет участника из списка имеющих доступ к доске.",
  actor: "Владелец Доски",
  pre: "Владелец открыл доску. На доске есть другие участники.",
  main: [
    #enum(
      enum.item(1)[Владелец открывает панель "Участники".],
      enum.item(2)[Владелец нажимает на меню (три точки) рядом с участником, которого нужно удалить.],
      enum.item(3)[Владелец выбирает опцию "Удалить с доски".],
      enum.item(4)[Система запрашивает подтверждение.],
      enum.item(5)[Владелец подтверждает удаление.],
      enum.item(6)[Система удаляет связь участника с доской в БД.],
      enum.item(7)[Если удаляемый пользователь в онлайн, система отключает его от сессии этой доски.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Владелец отменяет удаление.],
      enum.item(2)[Система закрывает диалог подтверждения, участник не удаляется.]
    )
  ],
  post: "Участник удален с доски и потерял к ней доступ.",
)

#uc_table(
  name: "Редактирование названия доски",
  id: "UC13 (F10)",
  brief: "Владелец изменяет название своей доски.",
  actor: "Владелец Доски",
  pre: "Владелец открыл доску.",
  main: [
    #enum(
      enum.item(1)[Владелец нажимает на текущее название доски в заголовке.],
      enum.item(2)[Система переводит поле названия в режим редактирования.],
      enum.item(3)[Владелец вводит новое название.],
      enum.item(4)[Владелец нажимает Enter или кликает вне поля.],
      enum.item(5)[Система сохраняет новое название в БД.]
    )
  ],
  post: "Название доски изменено.",
)

#uc_table(
  name: "Удаление доски",
  id: "UC14 (F11, R4)",
  brief: "Владелец навсегда удаляет доску и все связанные с ней данные.",
  actor: "Владелец Доски",
  pre: "Владелец находится в личном кабинете (списке своих досок) или открыл саму доску.",
  main: [
    #enum(
      enum.item(1)[Владелец в меню доски выбирает опцию "Удалить доску".],
      enum.item(2)[Система отображает диалог подтверждения с предупреждением о необратимости действия.],
      enum.item(3)[Владелец вводит название доски для подтверждения и нажимает "Удалить".],
      enum.item(4)[Система выполняет soft-delete (помечает доску как удаленную в БД) (R4).],
      enum.item(5)[Система отображает сообщение об успешном удалении и перенаправляет владельца в личный кабинет.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Владелец отменяет удаление.],
      enum.item(2)[Система закрывает диалог подтверждения, доска не удаляется.]
    )
  ],
  altB: [
    #enum(
      enum.item(1)[Владелец вводит неверное название доски.],
      enum.item(2)[Система блокирует кнопку удаления и отображает ошибку.]
    )
  ],
  post: "Доска помечена как удаленная. Все участники потеряли к ней доступ.",
)

#uc_table(
  name: "Просмотр доски по ссылке",
  id: "UC15 (F6, F7)",
  brief: "Анонимный пользователь получает доступ к доске для просмотра через публичную ссылку.",
  actor: "Анонимный Пользователь",
  pre: "У пользователя есть корректная invite-ссылка на доску.",
  main: [
    #enum(
      enum.item(1)[Анонимный пользователь переходит по предоставленной ссылке.],
      enum.item(2)[Система проверяет, что ссылка действительна и позволяет анонимный доступ.],
      enum.item(3)[Система загружает содержимое доски в режиме "Только чтение".],
      enum.item(4)[Пользователь может просматривать код и наблюдать за действиями других участников в реальном времени, но не может редактировать.]
    )
  ],
  altA: [
    #enum(
      enum.item(1)[Ссылка недействительна или просрочена.],
      enum.item(2)[Система отображает сообщение об ошибке: "Доска не найдена или доступ запрещен".]
    )
  ],
  post: "Анонимный пользователь имеет доступ к доске в режиме просмотра.",
)


== Список технологий и фреймворков:
#set heading(numbering: none)

=== Техноогии области представления системы:
- React v19
- Nginx: v1.29.1

=== Технологии на серверной части
- Spring Boot 4
- Spring Security
- PostgreSQL
- OpenAPI

=== Технологии для развертывания инфраструктуры
- Docker
- Docker-compose

#pagebreak()

=== Технологии для обеспечения качества и надежности системы
- JUnit5
- Mockito
- ESLint
- Prettier
- Checkstyle
- CI/CD Github Actions


= Этап 2

== Сформировать ER-модель базы данных
#figure(
  image("./diagrams/ER.png", width: 130%)
)
